import 'dart:async';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:prestacarro_front/gateway/person_gateway.dart';
import 'package:prestacarro_front/models/person.dart';
import 'package:prestacarro_front/provider/config_model.dart';
import 'package:prestacarro_front/views/index.dart';
import 'package:prestacarro_front/views/release.dart';
import 'package:prestacarro_front/widgets/main_layout.dart';
import 'package:provider/provider.dart';
import 'package:prestacarro_front/views/selection.dart';

class DocumentScan extends StatefulWidget {
  const DocumentScan({Key? key}) : super(key: key);

  @override
  _DocumentScanState createState() => _DocumentScanState();
}

class _DocumentScanState extends State<DocumentScan> {
  final FocusNode _focusNode = FocusNode();
  String _chain = "";
  Duration countdownDuration = Duration(minutes: 2);
  late PersonGateway personGateway;
  late bool menuSelectionEnabled;
  Timer? countdownTimer;
  late ConfigModel _model;

  @override
  void initState() {
    super.initState();
    _model = Provider.of<ConfigModel>(context, listen: false);
    personGateway = PersonGateway(_model.config.backendBaseUrl);
    menuSelectionEnabled = _model.config.selectionMenuEnabled;
    startTimer();
  }

  @override
  void dispose() {
    _focusNode.dispose();
    stopTimer();
    super.dispose();
  }

  void startTimer() {
    countdownTimer = Timer.periodic(Duration(seconds: 1), (_) => updateCountdown());
  }

  void stopTimer() {
    countdownTimer?.cancel();
  }

  void updateCountdown() {
    setState(() {
      final seconds = countdownDuration.inSeconds - 1;
      if (seconds < 0) {
        stopTimer();
        Navigator.pushReplacement(context, MaterialPageRoute(builder: (context) => Index()));
      } else {
        countdownDuration = Duration(seconds: seconds);
      }
    });
  }

  void handleDocumentScan() {
    print("Scan read completed");
    Person person = parsePersonData(_chain);
    if (menuSelectionEnabled) {
      navigateToSelection(person);
    } else {
      navigateToRelease(person);
    }
  }

  Person parsePersonData(String chain) {
    if (chain.length == 90) {
      return userFromNewDocumentStr(chain);
    } else {
      return userFromOldDocumentStr(chain);
    }
  }

  void navigateToRelease(Person person) {
    personGateway.post(person).then((value) {
      Navigator.pushReplacement(context, MaterialPageRoute(builder: (context) => Release(person: value)));
    }).catchError((error) {
      // Handle error (e.g., show error message)
    });
  }

  void navigateToSelection(Person person) {
    personGateway.post(person).then((value) {
      Navigator.pushReplacement(context, MaterialPageRoute(builder: (context) => Selection(person: value)));
    }).catchError((error) {
      // Handle error (e.g., show error message)
    });
  }

  void _handleKeyEvent(KeyEvent event) {
    if (event is KeyDownEvent) {
            var chain_lenght = _chain.length;
      if (chain_lenght == 90) {
        handleDocumentScan();
      }
      if (event.logicalKey == LogicalKeyboardKey.enter) {
        handleDocumentScan();
      } else if (event.logicalKey == LogicalKeyboardKey.tab) {
        _chain += '>';
      } else if (!event.logicalKey.isAutogenerated) {
        _chain += event.character ?? '';
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    FocusScope.of(context).requestFocus(_focusNode);
    return Scaffold(
      body: KeyboardListener(
        focusNode: _focusNode,
        onKeyEvent: _handleKeyEvent,
        child: MainLayout(
          child: Center(
            child: Card(
              shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(30)),
              elevation: 2,
              child: Container(
                width: 900,
                margin: EdgeInsets.all(5),
                decoration: BoxDecoration(borderRadius: BorderRadius.circular(30)),
                child: Padding(
                  padding: EdgeInsets.symmetric(horizontal: 20),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.center,
                    children: [
                      Row(
                        children: [
                          Image.asset('assets/images/document_icon.jpeg', width: 160, height: 160),
                          SizedBox(width: 10),
                          Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              Text("Escanea tu documento", style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold)),
                              SizedBox(height: 20),
                              Text("Ubica la parte trasera de tu documento en el lector de c√≥digo de barras", style: TextStyle(fontSize: 18)),
                            ],
                          ),
                        ],
                      ),
                      Divider(),
                      Image.asset('assets/images/document.jpeg', width: 300, height: 300),
                    ],
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
    );
  }

  Person userFromNewDocumentStr(String chain) {
    final nameParts = chain.substring(68).replaceAll(RegExp(r'<+'), '<').split('<').where((part) => part.isNotEmpty).toList();
    return Person(
      lastName: nameParts.isNotEmpty ? nameParts[0] : "",
      surName: nameParts.length > 1 ? nameParts[1] : "",
      firstName: nameParts.length > 2 ? nameParts[2] : "",
      middleName: nameParts.length > 3 ? nameParts[3] : null,
      documentNumber: chain.substring(52, 62),
      birthDate: chain.substring(34, 40),
      sex: chain.substring(41, 42),
    );
  }

  Person userFromOldDocumentStr(String chain) {
    chain = chain.replaceAll("|", "");
    var array = chain.replaceAll(RegExp(r'>$'), '').split('>');
    return Person(
      documentNumber: array[0],
      firstName: array[array.length == 5 ? 2 : 3],
      middleName: array.length == 7 ? array[4] : null,
      lastName: array[1],
      surName: array.length == 7 ? array[2] : null,
      sex: array[array.length == 5 ? 3 : 5],
      birthDate: array[array.length == 5 ? 4 : 6],
    );
  }
}
